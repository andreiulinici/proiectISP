package a;
import java.util.ArrayList;

public class Turist {
Persoana date; 
PunctReferinta locatie;
String codeT;
Boolean haveInstructor;
Instructor Instructor;
Partie Partie;
Transport Transport;
Boolean haveAccess;
Acces Access;
ArrayList<Partie> Traseu;
Boolean facturaPlatita;


ArrayList<PunctReferinta> tablouPuncteReferinta;

public Turist(Persoana persoana, Object object, String codTurist, Boolean haveInstructor2, Object object2, Transport t,
		Boolean haveAccess2, Object object3, Boolean facturaPlatita2,ArrayList<Partie> traseu) {
	
	this.date=persoana;
	//this.locatie=locatie;
	this.codeT=codTurist;
	this.haveInstructor=haveInstructor2;
	if (haveInstructor2) {
		//this.Instructor=instructor;
	}
	this.haveAccess=haveAccess2;
	if (this.haveAccess) {
	//this.Access=access
	this.Traseu=traseu;
	}
	
	this.facturaPlatita=facturaPlatita2;

	
}



public Turist() {
	// TODO Auto-generated constructor stub
}

public void afisareTurist() {
	//afisare turist
	this.date.afisareP();
	System.out.println(this.locatie); //locatie curenta
	System.out.println(this.codeT); //code Turist
	System.out.println(this.Instructor);
	// pct referinta ??
}

public void assignInstructor(Instructor p) {
	this.Instructor=p;
}

public void addPunctReferinta(PunctReferinta p) {
	this.tablouPuncteReferinta.add(p);
}

public double calculDistantaParcursa() {
	 final int R = 6371; // Radius of the earth
	 double  distance=0d;
	 for (int i=0;i<tablouPuncteReferinta.size();i++) {
		 Double latDistance = Math.toRadians(tablouPuncteReferinta.get(i+1).cx - tablouPuncteReferinta.get(i).cx);
		 Double lonDistance = Math.toRadians(tablouPuncteReferinta.get(i+1).cy - tablouPuncteReferinta.get(i).cy);
		 Double a = Math.sin(latDistance / 2) * Math.sin(latDistance / 2)
		            + Math.cos(Math.toRadians(tablouPuncteReferinta.get(i+1).cx)) * Math.cos(Math.toRadians(tablouPuncteReferinta.get(i).cx))
		            * Math.sin(lonDistance / 2) * Math.sin(lonDistance / 2);
		  Double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
		   distance = R * c * 1000; // convert to meters
		  double height = tablouPuncteReferinta.get(i+1).alt-tablouPuncteReferinta.get(i).alt;
		  distance = Math.pow(distance, 2) + Math.pow(height, 2);
	 }
	 	return (Math.sqrt(distance));
}

public void assignPartie(Partie p) {
	this.Partie=p;
	this.Traseu.add(p); //adaugare partie in traseu
}

public void assignTransport(Transport p) {
	this.Transport=p;
}





 public Boolean obtineAccess( Boolean b,Acces a ) {
	this.haveAccess=b;
	if (b) {
		this.Access=a;
	}
	else {
		this.Access=null;
	}
	return b;
	
}

public void platireFactura(Factura f) {
	if (this.haveInstructor && !this.facturaPlatita) {
		this.facturaPlatita=true;
				
	}
	else {
		this.facturaPlatita=false;
	}
}








}
